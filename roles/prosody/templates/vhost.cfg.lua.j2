-- {{ ansible_managed }}

VirtualHost "{{ item.name }}"

name = "{{ item.name }} Messaging Service";

-- This is a (by default, empty) list of accounts that are admins
-- for the server. Note that you must create the accounts separately
-- (see https://prosody.im/doc/creating_accounts for info)
-- Example: admins = { "user1@example.com", "user2@example.net" }
admins = { {{ item.admin_jids | default([]) | map("to_json") | join(", ") }} }

-- mod_groups: assign users to admin-defined groups (default: empty)
groups_file = "/etc/prosody/sharedGroups-{{ item.name }}.txt"

-- mod_server_contact_info: public contact addresses for abuse handling (default: empty)
contact_info = {
	abuse = { {{ item.admin_jids | default([]) | map('regex_replace', '^', 'xmpp:') | map("to_json") | join(", ") }} },
	admin = { {{ item.admin_jids | default([]) | map('regex_replace', '^', 'xmpp:') | map("to_json") | join(", ") }} },
	support = { "https://{{ prosody.web_domain.name | default(inventory_hostname) }}/" }
};

-- Authentication method (default: internal_hashed)
authentication = "{{ item.authentication_provider | default("internal_hashed") }}"

-- Allow new users to register from within their XMPP client (does not work with external authentication providers like imap) [XEP-0077] (default: false)
-- If mod_invites is loaded registrations are restricted to users with invitations from existing users
allow_registration = {{ (item.allow_registration == true or item.allow_registration == "invite") | ternary('true', 'false') if item.allow_registration is defined else 'false' }}
{% if item.allow_registration is defined and item.allow_registration == 'invite' %}
registration_invite_only = true; -- Enable registration only for users that have a valid invite token
{% endif %}

-- Archiving configuration
archive_expires_after = "{{ (item.delete_messages_after_days | string() + "d") if item.delete_messages_after_days is defined else "never" }}"; -- Remove archived messages after XXX days (default: 7d)

-- mod_conversejs:
conversejs_options = {
	-- GUI
	view_mode = "fullscreen";
	theme = "concord"; -- Select theme. "default" is the light theme, "concord" the dark theme (default: "default")
	show_controlbox_by_default = true; -- Mobile devices: Always show the box containing contacts and rooms (default: false)
	sticky_controlbox = true; -- Mobile devices: Remove close button from box containing contacts and rooms (default: false)
	allow_logout = false; -- Hide log out button (default: true)
	play_sounds = true; -- Play sound on new messages (default: false)
	-- omemo_default = true; -- Use OMEMO encryption by default if chat supports it (default: false)

	-- Connection to XMPP server
	discover_connection_methods = true; -- Enable users from XMPP domains not hosted on this server (default: false)
	auto_reconnect = true; -- On network failures try to reconnect automatically (default: false)
	enable_smacks = true; -- Enable support for stream management (XEP-0198)
	message_archiving_timeout = "60000"; -- Amount of time (in ms) to wait when requesting archived message from the server (default: 20000)

	-- User status
	csi_waiting_time = "10"; -- After XX seconds set user status to "inactive" (default: 0 -> never)
	auto_away = "180"; -- After XX seconds set user status to "away" (default: 0 -> never)
	auto_xa = "600"; -- After XX seconds set user status to "extended away" (default: 0 -> never)

	-- Message handling
	allow_non_roster_messaging = true; -- Receive message from users not in the roster, like in conversations.im (default: false)
	allow_chat_pending_contacts = true; -- Allow users to chat with pending contacts, like in conversations.im (default: false)
	allow_message_corrections = "last"; -- Users can only edit their last sent message (default: true)

	-- MUC
	auto_register_muc_nickname = true; -- Automatically register user's nickname from vCard in MUC (default: false)
	muc_domain = "{{ item.components.muc }}"; -- Default domain for new MUCs (default: unset -> users have to type in MUC domain name)
	auto_list_rooms = {{ item.conversejs.auto_list_rooms | default(true) | ternary("true", "false") }}; -- Automatically fetch all public rooms on this server (default: false)
{% if item.default_bookmarks is defined %}
	auto_join_rooms = { {% for roomname, roomjid in item.default_bookmarks.items() %}{{ "{ jid = \"%s\", minimized = true }" | format(roomjid) }}{% if not loop.last %}, {% endif %}{% endfor %} }; -- Automatically join this MUCs after logging in
{% endif %}
{% if item.conversejs.community_plugins is defined %}
	whitelisted_plugins = { {{ item.conversejs.community_plugins | default([]) | map("to_json") | join(", ") }} }; -- Enable community modules
{% endif %}
	muc_clear_messages_on_leave = false; -- Do not clear all cached messages when leaving a MUC (default: true)
}
conversejs_tags = {
	-- Load libsignal-protocol.js for OMEMO support (GPLv3; be aware of licence implications)
	[[<script src="https://{{ prosody.web_domain.name | default(inventory_hostname)  }}/conversejs-libsignal-protocol-javascript/libsignal-protocol.js"></script>]];
{% if item.conversejs.community_plugins is defined %}

	-- Load community plugins
{% for plugin in item.conversejs.community_plugins %}
	[[<script src="https://{{ prosody.web_domain.name | default(inventory_hostname) }}/packages/{{ plugin }}/{{ plugin }}.js"></script>]];
	[[<link type="text/css" rel="stylesheet" media="screen" href="https://{{ prosody.web_domain.name | default(inventory_hostname) }}/packages//{{ plugin }}/{{ plugin }}.css" />]];
{% endfor %}
{% endif %}
}

{% if item.default_bookmarks is defined %}
-- Add some default bookmarks to new users
default_bookmarks = {
{% for roomname, roomjid in item.default_bookmarks.items() %}
	{ jid = "{{ roomjid }}", name = "{{ roomname }}" };
{% endfor %}
};
{% endif %}

{% if item.allow_registration is defined and item.allow_registration == 'invite' %}
-- Invite-based account registration [XEP-0401]
modules_enabled = {
	"invites";
	"invites_adhoc";
	"invites_page";
	"invites_register";
	"invites_register_web";
}
-- mod_invites_adhoc
allow_user_invites = true; -- Allow non-admin users to invite contacts to register on this server (default: false)
-- mod_invites_page
site_name = "{{ item.name }} Messenger Service"; -- The friendly name of this server (default: "example.com")
-- mod_invites_register_web
webchat_url = "https://{{ prosody.web_domain.name | default(inventory_hostname) }}/{{ item.conversejs.weblocation | default("conversejs-" + item.name) }}"; -- External URL to converse.js (default: http_path of conversejs)
-- Change URLs for mod_invites to support multiple domains
http_paths = {
	register_apps = "/{{ item.name }}/register_apps";
	invites_page = "/{{ item.name }}/invites";
	invites_register_web = "/{{ item.name }}/register";
}

{% endif %}

------ Components ------
--- Set up a MUC (multi-user chat) room server: [XEP-0045]
Component "{{ item.components.muc }}" "muc"
	-- restrict_room_creation = "local"; -- Only users from this domain can create rooms (default: false)
	modules_enabled = {
	    "muc_limits"; -- Limit max. event rate in a MUC room
	    "muc_mam"; -- Enable archiving of MUC messages
	    "vcard_muc"; -- Enable vCards for MUC rooms (i.e. set an avatar for a MUC)
	    "muc_badge"; -- Offer SVG images with current user count for every room via https://{{ item.components.muc }}/muc_badge/ROOM-JID
	    "muc_mention_notifications"; -- Notify users when they're mentioned in a MUC, even if they're not currently present in it
	    "muc_moderation"; -- Enables a role "moderator" in MUCs (requires mod_muc_mam) [XEP-0425]
	    -- "bob"; -- Cache bits of binary on MUC services (incompatible with Prosody 0.11)
	    "muc_offline_delivery"; -- Support for sending messages in a MUC to affiliated users who are not in the room
	    "muc_markers"; -- Add internal API to retrieve the last displayed message by MUC occupants
	    "muc_rai"; -- Check for MUC activity without joining (requires mod_muc_markers) [XEP-xxx: Room Activity Indicators]
	}
	max_history_messages = 5000; -- Room can be configured to keep at max 5000 messages (default: 1000)
	muc_room_default_history_length = 5000 ; -- By default keep the last 5000 messages (default: 20)
	muc_room_default_persistent = true; -- By default keep empty rooms (default: false)
	-- muc_mam:
	muc_log_by_default = true; -- Enable conversation logging by default (can be disabled in room config)
	muc_log_expires_after = "{{ (item.delete_messages_after_days | string() + "d") if item.delete_messages_after_days is defined else "never" }}"; -- Remove archived MUC messages after XXX days (default: 7d)
	-- muc_limits:
	muc_max_nick_length = 64; -- Maximum allowed length of user nicknames (default: 32)

-- Set up a SOCKS5 bytestream proxy for server-proxied file transfers:
-- Listens on port 5000
Component "{{ item.components.proxy65 }}" "proxy65"

-- PubSub ("Publish-Subscribe") [XEP-0060]
Component "{{ item.components.pubsub }}" "pubsub"
	pubsub_max_items = 10000; -- Required for Movim, see https://github.com/movim/movim/wiki/Configure%20prosody (default: 256)

-- Handle file uploads with external webserver and share_v2.php (file is provided by mod_http_upload_external) [XEP-0363]
Component "{{ item.components.upload }}" "http_upload_external"
	http_upload_external_base_url = "https://{{ item.components.upload }}/s/"; -- URL to share_v2.php script
	http_upload_external_secret = "{{ uploadpwd[item.name] }}"; -- Shared secret, must also be entered in share_v2.php
	http_upload_external_file_size_limit = {{ item.max_upload_mbyte | default(100) }}*1024*1024; -- Max. upload size in bytes (default: 100 MByte)
	http_upload_external_protocol = "v2"; -- See docs of mod_http_upload_external (default: unset)
